<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SignalR.Hosting.Self</name>
    </assembly>
    <members>
        <member name="M:SignalR.TaskAsyncHelper.Interleave``1(System.Func{``0,System.Action,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},``0,System.Threading.Tasks.TaskCompletionSource{System.Object})">
            <summary>
            Passes a task returning function into another task returning function so that
            it can decide when it starts and returns a task that completes when all are finished
            </summary>
        </member>
        <member name="M:SignalR.Hosting.Self.DisconnectHandler.#ctor(System.Net.HttpListener)">
            <summary>
            Initializes a new instance of <see cref="T:SignalR.Hosting.Self.DisconnectHandler"/>.
            </summary>
            <param name="listener">The <see cref="T:SignalR.Hosting.Self.Server"/>'s HttpListener</param>
        </member>
        <member name="M:SignalR.Hosting.Self.DisconnectHandler.Initialize">
            <summary>
            Initializes the Request Queue Handler.  Meant to be called once the servers <see cref="T:System.Net.HttpListener"/> has been started.
            </summary>
        </member>
        <member name="M:SignalR.Hosting.Self.DisconnectHandler.GetDisconnectToken(System.Net.HttpListenerContext)">
            <summary>
            Gets the <see cref="T:System.Threading.CancellationToken"/> associated with the <paramref name="context"/>.  
            If the <see cref="T:System.Threading.CancellationToken"/> does not exist for the given <paramref name="context"/> then <see cref="M:SignalR.Hosting.Self.DisconnectHandler.CreateToken(System.UInt64)"/> is called.
            </summary>
            <param name="context">The context for the current connection.</param>
            <returns>A cancellation token that is registered for disconnect for the current connection.</returns>
        </member>
        <member name="T:SignalR.Hosting.Self.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SignalR.Hosting.Self.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SignalR.Hosting.Self.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SignalR.Hosting.Self.Resources.ClientAccessPolicyXml">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;access-policy&gt;
              &lt;cross-domain-access&gt;
                &lt;policy&gt;
                  &lt;allow-from http-request-headers=&quot;SOAPAction&quot;&gt;
                    &lt;domain uri=&quot;*&quot;/&gt;
                  &lt;/allow-from&gt;
                  &lt;grant-to&gt;
                    &lt;resource path=&quot;/&quot; include-subpaths=&quot;true&quot;/&gt;
                  &lt;/grant-to&gt;
                &lt;/policy&gt;
              &lt;/cross-domain-access&gt;
            &lt;/access-policy&gt;.
             </summary>
        </member>
        <member name="M:SignalR.Hosting.Self.Server.#ctor(System.String)">
            <summary>
            Initializes new instance of <see cref="T:SignalR.Hosting.Self.Server"/>.
            </summary>
            <param name="url">The url to host the server on.</param>
        </member>
        <member name="M:SignalR.Hosting.Self.Server.#ctor(System.String,SignalR.IDependencyResolver)">
            <summary>
            Initializes new instance of <see cref="T:SignalR.Hosting.Self.Server"/>.
            </summary>
            <param name="url">The url to host the server on.</param>
            <param name="resolver">The dependency resolver for the server.</param>
        </member>
        <member name="M:SignalR.Hosting.Self.Server.Start">
            <summary>
            Starts the server connection.
            </summary>
        </member>
        <member name="M:SignalR.Hosting.Self.Server.Stop">
            <summary>
            Stops the server.
            </summary>
        </member>
    </members>
</doc>
